#============================================================================================
# * Game Module
#============================================================================================
module MRGSL
  #------------------------------------------------------------------------------------------
  # * Point class
  #------------------------------------------------------------------------------------------
  class Point
    #----------------------------------------------------------------------------------------
    # * Accessors
    #----------------------------------------------------------------------------------------
    attr_accessor :x
    attr_accessor :y
    attr_accessor :z
    #----------------------------------------------------------------------------------------
    # * Constructor
    #----------------------------------------------------------------------------------------
    def initialize(x = 0, y = 0, z = 0)
      set(x,y,z)
    end
    #----------------------------------------------------------------------------------------
    # * set
    #----------------------------------------------------------------------------------------
    def set(x = 0, y = 0, z = 0)
      @x = x
      @y = y
      @z = z
      self
    end
    #----------------------------------------------------------------------------------------
    # * origin!
    #----------------------------------------------------------------------------------------
    def origin!
      @x = @y = @z = 0
      self
    end
    #----------------------------------------------------------------------------------------
    # * origin?
    #----------------------------------------------------------------------------------------
    def origin?
      @x == 0 and @y == 0 and @z == 0
    end
    #----------------------------------------------------------------------------------------
    # * +
    #----------------------------------------------------------------------------------------
    def +(var)
      var.plus_point(self)
      self
    end
    #----------------------------------------------------------------------------------------
    # * -
    #----------------------------------------------------------------------------------------
    def -(var)
      var.sub_point(self)
      self
    end
    #----------------------------------------------------------------------------------------
    # * *
    #----------------------------------------------------------------------------------------
    def *(var)
      var.mul_point(self)
      self
    end
    #----------------------------------------------------------------------------------------
    # * /
    #----------------------------------------------------------------------------------------
    def /(var)
      var.div_point(self)
      self
    end
    #----------------------------------------------------------------------------------------
    # * plus_point
    #----------------------------------------------------------------------------------------
    def plus_point(point)
      Point.new(point.x + @x, point.y + @y, point.z + @z)
    end
    #----------------------------------------------------------------------------------------
    # * Substracts each field of the pointer with itself
    #----------------------------------------------------------------------------------------
    def sub_point(point)
      Point.new(point.x - @x, point.y - @y, point.z - @z)
    end
    #----------------------------------------------------------------------------------------
    # * multiplies each field of the pointer with itself
    #----------------------------------------------------------------------------------------
    def mul_point(point)
      Point.new(point.x * @x, point.y * @y, point.z * @z)
    end
    #----------------------------------------------------------------------------------------
    # * divides each field of the pointer with itself
    #----------------------------------------------------------------------------------------
    def div_point(point)
      Point.new(point.x / @x, point.y / @y, point.z / @z)
    end
    #----------------------------------------------------------------------------------------
    # * is point in area?
    #----------------------------------------------------------------------------------------
    def in_area?(aRect)
      return aRect.contains_point?(self)
    end
  end
end
